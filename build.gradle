/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    id 'org.springframework.boot' version '2.4.4'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'com.ewerk.gradle.plugins.querydsl' version '1.0.10'    
}

repositories {
    mavenLocal()
    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}


group = 'com.exam'
version = '0.0.1-SNAPSHOT'
description = 'conv-server'
java.sourceCompatibility = JavaVersion.VERSION_1_8


/*
 * QueryDSL
 */
ext {
    querydsl_version = '4.3.1'
    BUILD_VERSION = new Date().format("yyyyMMddHHmmss")
}


dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    compile("org.mariadb.jdbc:mariadb-java-client")

    /* QeuryDSL */
    compile("com.querydsl:querydsl-apt:${querydsl_version}")
    compile("com.querydsl:querydsl-jpa:${querydsl_version}")
    implementation("com.querydsl:querydsl-sql-spring:${querydsl_version}")

    implementation 'org.modelmapper:modelmapper:2.3.9'
    compileOnly 'org.projectlombok:lombok:1.18.18'

    /* swagger 3.0 */
    implementation group: 'io.springfox', name: 'springfox-boot-starter', version: '3.0.0'

    /* kafka */
    implementation 'org.springframework.kafka:spring-kafka'

    runtimeOnly('com.h2database:h2')
    implementation('org.mariadb.jdbc:mariadb-java-client')


    testImplementation('org.springframework.boot:spring-boot-starter-test') { 
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine' 
    }
    // testImplementation group: 'org.springframework.kafka', name: 'spring-kafka-test', version: '2.6.7'


    annotationProcessor(
            'org.springframework.boot:spring-boot-configuration-processor',
            "com.querydsl:querydsl-apt:${querydsl_version}",
            'org.projectlombok:lombok'
    )
}

test {
    useJUnitPlatform()
}



tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

ext.profile = (!project.hasProperty('profile') || !profile) ? 'local' : profile






def querydslSrcDir = 'src/main/generated'

querydsl {
    library = "com.querydsl:querydsl-apt"
    jpa = true
    querydslSourcesDir = querydslSrcDir
}

compileQuerydsl {
    options.annotationProcessorPath = configurations.querydsl
}

configurations {
    // compileOnly {
    //     extendsFrom annotationProcessor
    // }
    querydsl.extendsFrom compileClasspath
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java', querydslSrcDir]
        }
        resources {
            srcDirs "src/main/resources", "src/main/resources-${profile}"
        }        
    }
}


task deleteGeneratedSources(type: Delete) {
    delete file(querydslSrcDir)
}

tasks.withType(JavaCompile) { it.dependsOn('deleteGeneratedSources') }

project.afterEvaluate {
    project.tasks.compileQuerydsl.options.compilerArgs = [
            "-proc:only",
            "-processor", project.querydsl.processors() +
                    ',lombok.launch.AnnotationProcessorHider$AnnotationProcessor',
    ]
}
